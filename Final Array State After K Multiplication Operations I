#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {
        int n = nums.size();
        // Min-Heap to store {value, index}
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Push all elements with their indices into the heap
        for (int i = 0; i < n; i++) {
            pq.push({nums[i], i});
        }

        // Perform k operations
        while (k--) {
            auto it = pq.top(); // Smallest element
            pq.pop();

            int val = it.first;
            int ind = it.second;

            // Update the value and reinsert into the heap
            val *= multiplier;
            pq.push({val, ind});
        }

        // Extract final values and reconstruct the array
        vector<int> ans(n, 0);
        while (!pq.empty()) {
            auto it = pq.top();
            pq.pop();

            int val = it.first;
            int ind = it.second;

            ans[ind] = val;
        }

        return ans;
    }
};
