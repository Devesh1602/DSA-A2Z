class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n = days.size();
        vector<int> dp(days[n - 1] + 1, 0);
        unordered_set<int> travelDays(days.begin(), days.end());
        
        for (int i = 1; i <= days[n - 1]; ++i) {
            if (travelDays.find(i) == travelDays.end()) {
                dp[i] = dp[i - 1];
                continue;
            }
            dp[i] = dp[i - 1] + costs[0]; // 1-day pass
            dp[i] = min(dp[i], dp[max(0, i - 7)] + costs[1]); // 7-day pass
            dp[i] = min(dp[i], dp[max(0, i - 30)] + costs[2]); // 30-day pass
        }
        
        return dp[days[n - 1]];
    }
};
